//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// InputChatThemeClassArray is adapter for slice of InputChatThemeClass.
type InputChatThemeClassArray []InputChatThemeClass

// Sort sorts slice of InputChatThemeClass.
func (s InputChatThemeClassArray) Sort(less func(a, b InputChatThemeClass) bool) InputChatThemeClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputChatThemeClass.
func (s InputChatThemeClassArray) SortStable(less func(a, b InputChatThemeClass) bool) InputChatThemeClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputChatThemeClass.
func (s InputChatThemeClassArray) Retain(keep func(x InputChatThemeClass) bool) InputChatThemeClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputChatThemeClassArray) First() (v InputChatThemeClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputChatThemeClassArray) Last() (v InputChatThemeClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputChatThemeClassArray) PopFirst() (v InputChatThemeClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputChatThemeClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputChatThemeClassArray) Pop() (v InputChatThemeClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsInputChatTheme returns copy with only InputChatTheme constructors.
func (s InputChatThemeClassArray) AsInputChatTheme() (to InputChatThemeArray) {
	for _, elem := range s {
		value, ok := elem.(*InputChatTheme)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsInputChatThemeUniqueGift returns copy with only InputChatThemeUniqueGift constructors.
func (s InputChatThemeClassArray) AsInputChatThemeUniqueGift() (to InputChatThemeUniqueGiftArray) {
	for _, elem := range s {
		value, ok := elem.(*InputChatThemeUniqueGift)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// InputChatThemeArray is adapter for slice of InputChatTheme.
type InputChatThemeArray []InputChatTheme

// Sort sorts slice of InputChatTheme.
func (s InputChatThemeArray) Sort(less func(a, b InputChatTheme) bool) InputChatThemeArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputChatTheme.
func (s InputChatThemeArray) SortStable(less func(a, b InputChatTheme) bool) InputChatThemeArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputChatTheme.
func (s InputChatThemeArray) Retain(keep func(x InputChatTheme) bool) InputChatThemeArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputChatThemeArray) First() (v InputChatTheme, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputChatThemeArray) Last() (v InputChatTheme, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputChatThemeArray) PopFirst() (v InputChatTheme, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputChatTheme
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputChatThemeArray) Pop() (v InputChatTheme, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// InputChatThemeUniqueGiftArray is adapter for slice of InputChatThemeUniqueGift.
type InputChatThemeUniqueGiftArray []InputChatThemeUniqueGift

// Sort sorts slice of InputChatThemeUniqueGift.
func (s InputChatThemeUniqueGiftArray) Sort(less func(a, b InputChatThemeUniqueGift) bool) InputChatThemeUniqueGiftArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of InputChatThemeUniqueGift.
func (s InputChatThemeUniqueGiftArray) SortStable(less func(a, b InputChatThemeUniqueGift) bool) InputChatThemeUniqueGiftArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of InputChatThemeUniqueGift.
func (s InputChatThemeUniqueGiftArray) Retain(keep func(x InputChatThemeUniqueGift) bool) InputChatThemeUniqueGiftArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s InputChatThemeUniqueGiftArray) First() (v InputChatThemeUniqueGift, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputChatThemeUniqueGiftArray) Last() (v InputChatThemeUniqueGift, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputChatThemeUniqueGiftArray) PopFirst() (v InputChatThemeUniqueGift, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero InputChatThemeUniqueGift
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputChatThemeUniqueGiftArray) Pop() (v InputChatThemeUniqueGift, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
