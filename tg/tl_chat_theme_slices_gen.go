//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChatThemeClassArray is adapter for slice of ChatThemeClass.
type ChatThemeClassArray []ChatThemeClass

// Sort sorts slice of ChatThemeClass.
func (s ChatThemeClassArray) Sort(less func(a, b ChatThemeClass) bool) ChatThemeClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of ChatThemeClass.
func (s ChatThemeClassArray) SortStable(less func(a, b ChatThemeClass) bool) ChatThemeClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of ChatThemeClass.
func (s ChatThemeClassArray) Retain(keep func(x ChatThemeClass) bool) ChatThemeClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s ChatThemeClassArray) First() (v ChatThemeClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChatThemeClassArray) Last() (v ChatThemeClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChatThemeClassArray) PopFirst() (v ChatThemeClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero ChatThemeClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChatThemeClassArray) Pop() (v ChatThemeClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsChatTheme returns copy with only ChatTheme constructors.
func (s ChatThemeClassArray) AsChatTheme() (to ChatThemeArray) {
	for _, elem := range s {
		value, ok := elem.(*ChatTheme)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsChatThemeUniqueGift returns copy with only ChatThemeUniqueGift constructors.
func (s ChatThemeClassArray) AsChatThemeUniqueGift() (to ChatThemeUniqueGiftArray) {
	for _, elem := range s {
		value, ok := elem.(*ChatThemeUniqueGift)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// ChatThemeArray is adapter for slice of ChatTheme.
type ChatThemeArray []ChatTheme

// Sort sorts slice of ChatTheme.
func (s ChatThemeArray) Sort(less func(a, b ChatTheme) bool) ChatThemeArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of ChatTheme.
func (s ChatThemeArray) SortStable(less func(a, b ChatTheme) bool) ChatThemeArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of ChatTheme.
func (s ChatThemeArray) Retain(keep func(x ChatTheme) bool) ChatThemeArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s ChatThemeArray) First() (v ChatTheme, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChatThemeArray) Last() (v ChatTheme, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChatThemeArray) PopFirst() (v ChatTheme, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero ChatTheme
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChatThemeArray) Pop() (v ChatTheme, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// ChatThemeUniqueGiftArray is adapter for slice of ChatThemeUniqueGift.
type ChatThemeUniqueGiftArray []ChatThemeUniqueGift

// Sort sorts slice of ChatThemeUniqueGift.
func (s ChatThemeUniqueGiftArray) Sort(less func(a, b ChatThemeUniqueGift) bool) ChatThemeUniqueGiftArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of ChatThemeUniqueGift.
func (s ChatThemeUniqueGiftArray) SortStable(less func(a, b ChatThemeUniqueGift) bool) ChatThemeUniqueGiftArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of ChatThemeUniqueGift.
func (s ChatThemeUniqueGiftArray) Retain(keep func(x ChatThemeUniqueGift) bool) ChatThemeUniqueGiftArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s ChatThemeUniqueGiftArray) First() (v ChatThemeUniqueGift, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChatThemeUniqueGiftArray) Last() (v ChatThemeUniqueGift, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChatThemeUniqueGiftArray) PopFirst() (v ChatThemeUniqueGift, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero ChatThemeUniqueGift
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChatThemeUniqueGiftArray) Pop() (v ChatThemeUniqueGift, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
